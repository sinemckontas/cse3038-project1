#Bilal Acıkel 150119897
#Sinem Ceren Kontaş 150118062
#Reyta Gul Muran 150117028

.data

strWelcome:      .asciiz  "\nMain Menu:\n 1. Base Converter\n 2. Add Rational Number\n 3. Text Parser\n 4. Mystery Matrix Operation \n 5. Exit\n "
strOption:       .asciiz  "Please select an option: "
strEnd:	         .asciiz  "5 and exitting...\n"
strFonksiyon:    .asciiz "Fonksiyon\n"


q1inputText: 	 .asciiz "Input: "
q1typeText: 	 .asciiz "Type: "
q1outputText:	 .asciiz "Output: "	
q1list:          .space 1000
q1resultString:	 .space 1000


q2str: 		  .asciiz "11111101"
q2strFirstNom:    .asciiz "Enter the first nominator: "
q2strSecondNom:   .asciiz "Enter the second nominator: "
q2strFirstDenom:  .asciiz "Enter the first denominator: "
q2strSecondDenom: .asciiz "Enter the second denominator: "
q2strSlash: 	  .asciiz "/"


q3prompt1:        .asciiz  "Enter string: "
q3str: 		  .space 1000     #array for the string read from user
q3prompt2:        .asciiz  "Enter parser set: "
q3parsers: 	  .space 100 	 #array for the parser set read from user
q3nullchar: 	  .word 0 	 #null character
q3newlinechar:    .word '\n'
q3spacechar:     .word ' ' 	#spacechar is a space character
q3wordlist:       .space 1000   #array of words


q4prompt1:        .asciiz "Enter numbers: "
q4list: 	  .space 1000 	#array for the string read from user
q4spacechar:     .word ' '	#spacechar is a space character
q4zerochar: 	  .word '0'
q4ninechar: 	  .word '9'
q4newlinechar:    .word '\n'
q4numlist: 	  .space 1000 	#array of numbers
q4results: 	  .space 1000 	#array for results

.text 
	
main:
	add $t0, $zero , $zero
	
	
while:	
	beq $t0, 5, endwhile 	#while option is not 5(exit)

	li $v0, 4		#welcome message
	la $a0, strWelcome
	syscall
	
	li $v0, 4		#getting option as an input
	la $a0, strOption
	syscall
	
	li $v0, 5		#storing option to temp
	syscall
	move $t0, $v0

#---------------------------------------------------------	
	beq $t0, 1, q1question1  #if user choice option 1
	
	beq $t0, 2, q2question2  #if user choice option 2
	
    	beq $t0, 3, q3question3  #if user choice option 3
	
	beq $t0, 4, q4question4  #if user choice option 4
	
	beq $t0, 5, endwhile    #if user choice option 5
	
#------------------------------------------------------------------------------------
	
q1question1:
	li $v0, 4             #load input text and print
	la $a0, q1inputText     
	syscall
	
	li $v0, 8 
	la $a0, q1list       # load byte space into address
	li $a1, 1000         # allot the byte space for string
	syscall
	
	li $v0, 4
	la $a0, q1typeText
	syscall
	
	li $v0, 5
	syscall		   # The type number is stored in v0
	
	move $s0, $v0	   # Save the type value in s0
	j q1length
	
	
q1length_ret:
	move $s1, $v0	  # Save the length of binary string in s1
	

q1convert_ret:
   	la $a0, q1outputText	# load and print "output" string
    	li $v0, 4
    	syscall
    		
   	la $a0, q1list		# reload byte space to primary addressmove $a0, $s0   # primary address = t0 address (load pointer)
    	li $v0, 4		# print string
    	syscall
    	j q1exit


q1length:
	addi $t0, $zero, 0 	# Array index
	addi $t1, $zero, 0 	# Character read from array
	addi $t2, $zero, 0 	# Number of valid characters
	
	
q1length_loop:
	lbu $t1, q1list($t0)			# Load the character from user input
	beq $t1, 48, q1length_loop_count_char	# branch if char == '0'
	beq $t1, 49, q1length_loop_count_char	# branch if char == '1'
	beq $t1, 32, q1length_loop_skip_char	# skip current char if space character
	j q1length_loop_return			# Character is neither '0', '1', nor a space. Invalid char, EOL reached.
	
	
q1length_loop_count_char:
	addi $t2, $t2, 1 		# Increment valid char counter
	
	
q1length_loop_skip_char:
	addi $t0, $t0, 1 		# Move to next char
	j q1length_loop
	
	
q1length_loop_return:
	move $v0, $t2			# Return the length of binary number
	j q1length_ret


q1exit:
	j while
	
	
#-------------------------------------------------------------------------------

q2question2:
	li $v0, 4
	la $a0, q2strFirstNom		 #ask first nominator		
	syscall
	
	li $v0, 5
	syscall 
	move $t1, $v0			#first nom --> t1
	
	
	li $v0, 4
	la $a0, q2strFirstDenom		#ask first denominator
	syscall
	
	li $v0, 5
	syscall 
	move $t2, $v0			#first denom --> t2
	
	li $v0, 4
	la $a0, q2strSecondNom		#ask second nominator	
	syscall

	li $v0, 5
	syscall 
	move $t3, $v0			#second nom --> t3
	
	li $v0, 4
	la $a0, q2strSecondDenom	#ask second denominator
	syscall	

	li $v0, 5
	syscall 
	move $t4, $v0			#second denom --> t4
	
	
	mul $t5 ,$t1, $t4		#first nom * second denom -> t5
	mul $t6, $t3, $t2		#second nom * first denom -> t6
	
	add $t7, $t5, $t6		#t7 = (firstNom * secondDenom + secondNom * firstDenom)
	
	add $s7, $t7, $zero		#save final nom
	
	mul $t6, $t2, $t4		#t6 = firstDenom*secondDenom
	add $s6, $t6, $zero		#save final denom


	
	jal q2gcd			#jump to the gcd func
	
	
	div $s7, $s7, $v1		#divide nom to gcd
	div $s6, $s6, $v1		#divide denom to gcd
	
	li $v0 ,1			#printi int
	add $a0 ,$s7, $zero
	syscall				#print gcd
	
	li $v0, 4
	la $a0, q2strSlash		#ask first denominator
	syscall
	
	li $v0 ,1			#printi int
	add $a0 ,$s6, $zero
	syscall				#print gcd	
	
	j q2exitq2
	
	
q2gcd:
	addi, $sp, $sp, -12
	
	sw $ra, 0($sp)			#push func into the stack
	sw $s0, 4($sp)			#push s0 into stack
	sw $s1, 8($sp)			#push s1 into stack
	
	
	add $s0, $t6, $zero		#s0 = first param
	add $s1, $t7, $zero		#s1 = second param
	
	
	beq $zero, $s1, q2returnGcd	#if second param is equal to zero return the output
	
	addi $t6, $s1, 0		#t6 = second param
	
	
	div $s0, $s1
	mfhi $t2
	
	addi $t7, $t2, 0		
	
	jal q2gcd
	
	
q2returnGcd:
	move  $v1, $t6			#returns first param (gcd)
	jal q2exitGcd
	
	
q2exitGcd:
	lw $ra, 0($sp)
	lw $s0, 4($sp)
	lw $s1, 8($sp)
		
	addi $sp, $sp, 12
		
	jr $ra
	
	
q2exitq2:
	j while	
	

#--------------------------------------------------------------------------------------------------
	
q3question3:    
	li $v0, 4     		#command for printing a string
   	la $a0, q3prompt1 	#loading the string to print into the argument to enable printing
    	syscall
   	 

    	li $v0, 8    		#command for reading a string
    	la $a0, q3str
    	li $a1, 1000
    	syscall      		#executing the command 
    
    	move $t0, $a0 		# copying a0 to t0 
    	add $t4, $zero, $zero   #t4 initialized as zero, represents the word just read
    	add $t5, $zero, $zero   #t5 initialized as zero, represents length of string
    
    
    	li $v0, 4    		#command for printing a string
    	la $a0, q3prompt2 	#loading the string to print into the argument to enable printing
    	syscall

    	li $v0, 8    		#command for reading a string
    	la $a0, q3parsers
    	li $a1, 1000
    	syscall      		#executing the command
    
    	move $t1, $a0 		# copying a0 to t1	  
    	lw $t7, q3spacechar 	#space char put into t7
    	add $s0, $zero, $zero
    
    
q3stringloop: 
	lbu $t2, 0($t0) 	#reading string char by char
	addi $t0, $t0, 1 	#to read next char
	beq $t2, $t7, q3nextelement #go to next element if space char occurs
    
	lw $t6, q3nullchar
	beq $t2, $t6, q3done 	#go to done if null char occurs
	lw $t6, q3newlinechar
	beq $t2, $t6, q3done 	#go to done if newline char occurs
    
    
q3parserloop:
	lbu $t3, 0($t1)   	#reading parse char by char
	addi $t1, $t1, 1 	#read next parse char
	beq $t2, $t3, q3nextelement #go to next element if parser char occurs
	beq $t3, $t7, q3parserloop # ignore space
	lw $t6, q3nullchar
	beq $t3, $t6, q3parserdone #go to done if null char occurs
	lw $t6, q3newlinechar
	beq $t3, $t6, q3parserdone #go to done if newline char occurs
	j q3parserloop
     

q3nextelement: 			#if space or parse char exit
	la $t1, q3parsers
	beq $s0, 0, q3stringloop
	lw $t6, q3newlinechar
	li $v0, 11
	move $a0, $t6
	syscall
	add $s0, $zero, $zero
	j q3stringloop


q3parserdone:			 #print character
	la $t1, q3parsers
	li $v0, 11
	move $a0, $t2
	syscall
	addi $s0, $s0, 1
	j q3stringloop
   
   
q3done: #if string end
	lw $t6, q3newlinechar
	li $v0, 11
	move $a0, $t6
	syscall			
	
	j while

#-------------------------------------------------------------------------------------------------

q4question4:
	li $v0, 4     #command for printing a string
	la $a0, q4prompt1 #loading the string to print into the argument to enable printing
	syscall

	li $v0, 8    #command for reading a string
	la $a0, q4list
	li $a1, 1000
	syscall      #executing the command 
    
	move $t0, $a0 #copying a0 to t0	
    
	lw $t7, q4spacechar #space char put into t7
	add $t3, $zero, $zero #t3 initialized as zero
	add $t5, $zero, $zero #t5 initialized as zero, t5 is N^2
    
    
q4loop: 
	lbu $t1, 0($t0) #read char by char t0 to t1
	addi $t0, $t0, 1 #to read next char
	beq $t1, $t7, q4nextelement #go to next element if space char occurs
    
	lw $t6, q4zerochar
	blt $t1, $t6, q4done #go to done if char not number (ascii < 0)
    
	lw $t6, q4ninechar
	bgt $t1, $t6, q4done #go to done if char not number (ascii > 9)
    
	addi $t2, $t1, -48   #convert char to int and keep it in t2
	mul $t3, $t3, 10     #t3 = t3 * 10
	add $t3, $t3, $t2    #t3 = (t3 * 10) + t2
	j q4loop
     
   
q4nextelement: 			#if space exist
	mul $t1, $t5, 4 
	sw $t3, q4numlist($t1)   #put t3 to memory (t3 is the value of the number that has just been read)
	addi $t5, $t5, 1	 #increase number of read numbers aka N^2
	add $t3, $zero, $zero   #t3 set as zero
	j q4loop
    
    
q4done:			 #if string end
	mul $t1, $t5, 4 
	sw $t3, q4numlist($t1)  #put t3 to memory (t3 is the value of the number that has just been read)
	addi $t5, $t5, 1 	#increase number of read numbers aka N^2
	j q4sqroot
    
    
q4sqroot: 		#square root operation to get dimension N
	addi $t1, $zero, 1 #t1=1,2,3,4.... and go on
	addi $t2, $zero, 3 #t2=1,3,5... and go on
	addi $t3, $zero, 1 #t3 is become sum, t3=1,4,9,16... and go on
	
	
q4sqloop: 
	beq $t5, $t3, q4dimacqd
	add $t3, $t3, $t2
	addi $t2, $t2, 2
	addi $t1, $t1, 1
	j q4sqloop
    
    
q4dimacqd:
	move $t5, $t1 	   # N (dimension) keeping t5
	addi $t0, $zero, 1 #checking for number of operations (N times)
	addi $t7, $zero, 0 #index
	addi $t6, $zero, 0 #line counter
	mul $t1, $t5, 4
	addi $t1, $t1, 4 #calculate 4(n+1) and keeping t1
	mul $t2, $t5, 4
	addi $t2, $t2, -4 #calculate 4(n-1) and keeping t2
	lw $t3, q4numlist($t7) # begining of matrix
    
    
q4horizontaladd: 	#operations for horizontal
	add $t7, $t7, $t1 #index (n+1) next
	lw $t4, q4numlist($t7) #load new element
	mul $t3, $t3, $t4 #mult old element
	addi $t0, $t0, 1 #add 1 
	beq $t0, $t5, q4horizontaldone #reach max operation
	
	
q4horizontalsub:    #operations for horizontal for second time
	sub $t7, $t7, $t2 #index (n-1) back
	lw $t4, q4numlist($t7) #load new element
	mul $t3, $t3, $t4 #mult old element
	addi $t0, $t0, 1 #add 1
	beq $t0, $t5, q4horizontaldone #reach max operation
	j q4horizontaladd
    
    
q4horizontaldone:
	addi $v0, $zero, 1
	move $a0, $t3
	syscall #print multiply
	addi $v0, $zero, 11
	lw $a0, q4spacechar
	syscall #print space
	addi $t6, $t6, 1 #add new line
	div $t0, $t5, 2 
	beq $t6, $t0, q4vertical #if line = n/2 then end 
	addi $t0, $zero, 1 #checking number of operations (N times)
	addi $t7, $zero, 1 
	mul $t7,$t7, 8
	mul $t7,$t7, $t6
	mul $t7,$t7, $t5 
	lw $t3, q4numlist($t7)
	j q4horizontaladd
    
    
q4vertical:
	addi $v0, $zero, 11
	lw $a0, q4newlinechar
	syscall 
	addi $t6, $zero, 0 
	addi $t0, $zero, 1 #checking number of operations (N times)
	addi $t7, $zero, 4 
	lw $t3, q4numlist($t7) #(begining of matrix)
    
    
q4verticalleft: 	#operations for vertical left
	add $t7, $t7, $t2 #index (n+1) next
	lw $t4, q4numlist($t7) 
	mul $t3, $t3, $t4 #mult with old element
	addi $t0, $t0, 1 #add 1
	beq $t0, $t5, q4verticaldone #end of vertical
	
	
q4verticalright: 	#operations for vertical right
	add $t7, $t7, $t1 #index (n-1) next
	lw $t4, q4numlist($t7) 
	mul $t3, $t3, $t4 #mult with old element
	addi $t0, $t0, 1 #add 1
	beq $t0, $t5, q4verticaldone #end of vertical
	j q4verticalleft #if it is not end of vertical then continue
    
    
q4verticaldone:
	addi $v0, $zero, 1
	move $a0, $t3
	syscall 	#print multiply
	addi $v0, $zero, 11
	lw $a0, q4spacechar
	syscall 	#add space
	addi $t6, $t6, 1 #add 1
	div $t0, $t5, 2 
	beq $t6, $t0, q4exit #if line = n/2 then end 
	addi $t0, $zero, 1 #checking number of operations (N times)
	mul $t7, $t6, 2
	addi $t7, $t7, 1 
	mul $t7, $t7, 4 
	lw $t3, q4numlist($t7)
	j q4verticalleft
    
    
q4exit:
	j while
	
#-----------------------------------------------------------------------------------------------------------------------------	

endwhile: 
	
	li $v0, 4
	la $a0, strEnd		#exit message
	syscall 
	
	li $v0, 10		#exit
	syscall
